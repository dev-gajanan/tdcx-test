[{"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/index.js":"1","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/reportWebVitals.js":"2","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/App.js":"3","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/screens/login/Login.js":"4","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/screens/login/styles.js":"5","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/routes.js":"6","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/screens/pageNotFound/PageNotFound.js":"7","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/screens/dashboard/Dashboard.js":"8","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/utils/user-utils.js":"9","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/utils/api-utils.js":"10","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/header/Header.js":"11","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/card/TaskCard.js":"12","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/taskDetails/TaskDetails.js":"13","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/modal/Modal.js":"14","/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/index.js":"15","/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/App.js":"16","/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/reportWebVitals.js":"17","/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/routes.js":"18","/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/utils/user-utils.js":"19","/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/screens/dashboard/Dashboard.js":"20","/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/screens/login/Login.js":"21","/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/screens/pageNotFound/PageNotFound.js":"22","/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/utils/api-utils.js":"23","/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/screens/login/styles.js":"24","/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/components/header/Header.js":"25","/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/components/card/TaskCard.js":"26","/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/components/taskDetails/TaskDetails.js":"27","/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/components/modal/Modal.js":"28"},{"size":500,"mtime":1620840240400,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1620840240400,"results":"31","hashOfConfig":"30"},{"size":884,"mtime":1621081017116,"results":"32","hashOfConfig":"30"},{"size":2446,"mtime":1621100997822,"results":"33","hashOfConfig":"30"},{"size":531,"mtime":1621078651704,"results":"34","hashOfConfig":"30"},{"size":486,"mtime":1621079399176,"results":"35","hashOfConfig":"30"},{"size":149,"mtime":1621079369912,"results":"36","hashOfConfig":"30"},{"size":2196,"mtime":1621118214110,"results":"37","hashOfConfig":"30"},{"size":821,"mtime":1621088697074,"results":"38","hashOfConfig":"30"},{"size":242,"mtime":1621084497952,"results":"39","hashOfConfig":"30"},{"size":1690,"mtime":1621089434860,"results":"40","hashOfConfig":"30"},{"size":3623,"mtime":1621114256517,"results":"41","hashOfConfig":"30"},{"size":8969,"mtime":1621118219953,"results":"42","hashOfConfig":"30"},{"size":431,"mtime":1621132886218,"results":"43","hashOfConfig":"30"},{"size":500,"mtime":1620840240400,"results":"44","hashOfConfig":"45"},{"size":884,"mtime":1621081017116,"results":"46","hashOfConfig":"45"},{"size":362,"mtime":1620840240400,"results":"47","hashOfConfig":"45"},{"size":486,"mtime":1621079399176,"results":"48","hashOfConfig":"45"},{"size":821,"mtime":1621088697074,"results":"49","hashOfConfig":"45"},{"size":2196,"mtime":1621118214110,"results":"50","hashOfConfig":"45"},{"size":2446,"mtime":1621100997822,"results":"51","hashOfConfig":"45"},{"size":149,"mtime":1621079369912,"results":"52","hashOfConfig":"45"},{"size":205,"mtime":1621133954277,"results":"53","hashOfConfig":"45"},{"size":531,"mtime":1621078651704,"results":"54","hashOfConfig":"45"},{"size":1781,"mtime":1621134370627,"results":"55","hashOfConfig":"45"},{"size":3623,"mtime":1621114256517,"results":"56","hashOfConfig":"45"},{"size":8969,"mtime":1621118219953,"results":"57","hashOfConfig":"45"},{"size":352,"mtime":1621133865069,"results":"58","hashOfConfig":"45"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"1p4o6sh",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"61"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"61"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pwrqau",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/index.js",[],["118","119"],"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/reportWebVitals.js",[],"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/App.js",[],"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/screens/login/Login.js",[],"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/screens/login/styles.js",[],"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/routes.js",[],"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/screens/pageNotFound/PageNotFound.js",[],"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/screens/dashboard/Dashboard.js",[],"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/utils/user-utils.js",[],"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/utils/api-utils.js",[],"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/header/Header.js",[],"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/card/TaskCard.js",["120"],"import React, { useEffect, useState } from \"react\";\nimport './styles.css';\nimport styled from 'styled-components';\nimport {PieChart, Pie, Tooltip, ResponsiveContainer, Cell} from 'recharts';\n\nconst AppCard = styled.div`\n    background: #fff;\n    padding: 20px 20px;\n    transition: 0.5s all ease-out;\n    filter: drop-shadow(0 0 1px #ccc);\n    border-radius: 10px;\n    height: 120px;\n`;\nconst CompletedTask = styled.label`\n    color: #1976d2;\n    font-size: 50px;\n`;\n\nconst TaskCard = (props) => {\n    const {title, type, dashboardData} = props;\n    const [data, setData] = useState([]);\n    useEffect(()=> {\n        const totalTasks = props.dashboardData.totalTasks;\n        let completed = props.dashboardData.tasksCompleted/totalTasks*100;\n        let pending = (totalTasks-props.dashboardData.tasksCompleted)/totalTasks*100;\n        setData([\n            {name: \"Complated Tasks\", value: completed},\n            {name: \"Pending Tasks\", value: pending}\n        ])\n    },[props.dashboardData  ])\n\n    const renderCounter = () => {\n        return <div style={{marginTop: '20px'}}>\n            <CompletedTask>{dashboardData.tasksCompleted}</CompletedTask>/\n            <label>{dashboardData.totalTasks}</label>\n        </div>\n    }\n\n    const renderList = () => {\n        if(dashboardData.latestTasks) {\n            return <ul className=\"card-list\">\n                { \n                    dashboardData.latestTasks.map((data, index) => (\n                        (!data.completed ? <li key={index}>{data.name}</li> : <li key={index}><del>{data.name}</del></li>)\n                    ))\n                }\n            </ul>\n        }\n        return \"\"\n    }\n\n    const renderChart = () => {\n        return <div className=\"chart-container\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\" minHeight={100}>\n                <PieChart>\n                    <Pie\n                        dataKey=\"value\"\n                        isAnimationActive={false}\n                        data={data}\n                        fill=\"#8884d8\"\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        label={renderLabel}\n                    >\n                        {data.map((entry, index) => (\n                            <Cell\n                                dataKey=\"name\"\n                                key={`cell-${index}`}\n                                fill={COLORS[index % COLORS.length]}\n                            />\n                        ))}\n                    </Pie>\n                    {/* <Tooltip/> */}\n                </PieChart>\n            </ResponsiveContainer>\n        </div>\n    }\n\n    const renderCardContent = () => {\n        if(type === 'TASK_COUNTER') {\n            return renderCounter()\n        }\n\n        else if(type === 'TASK_LIST') {\n           return renderList()\n        }\n\n        else if(type === 'TASK_CHART') {\n            return renderChart()\n        }\n    }\n\n    \n    return <AppCard>\n        <h3 className=\"card-title\"> {title??\"\"}</h3>\n        {renderCardContent()}\n    </AppCard>\n}\n\nconst COLORS = ['#1890ff', '#ddd'];\nconst RADIAN = Math.PI / 180;\nconst renderLabel = ({\n    cx, \n    cy, \n    midAngle, \n    innerRadius, \n    outerRadius, \n    index,\n    name\n}) => {\n    const radius =  10+innerRadius + (outerRadius - innerRadius);\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n        <text fontSize=\"12\" x={x} y={y} fill=\"#1890ff\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n           {name}\n        </text>\n    );\n}\n\nexport default TaskCard;","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/taskDetails/TaskDetails.js",["121"],"import React, { useEffect, useState } from 'react';\nimport './styles.css';\nimport styled from 'styled-components';\nimport { request } from '../../utils/api-utils';\nimport { getToken } from '../../utils/user-utils';\nimport Modal from '../modal/Modal';\nimport _ from 'lodash';\nconst AppCard = styled.div`\n    background: #fff;\n    padding: 20px 20px;\n    transition: 0.5s all ease-out;\n    filter: drop-shadow(0 0 1px #ccc);\n    border-radius: 10px;\n    height: auto;\n`;\nconst TaskList = styled.ul`\n    margin: 0;\n    padding: 0;\n    list-style: none;\n`;\nconst ListItem = styled.li`\n    padding: 15px 0;\n    border-top: 1px solid #eee;\n    :first-of-type {\n        border-top: none;\n    }\n`;\nconst TaskDetails = (props) => {\n    const {title} = props\n    const [tasks, setTasks] = useState([])\n    const [show, setShowModal] = useState(false)\n    const [taskName, setTaskName] = useState('')\n    const [isEdit, setIsEdit] = useState(false)\n    const [editId, setEditId] = useState('')\n    const [searchText, setSearchText] = useState('')\n    const [searchData, setSearchData] = useState([])\n\n    useEffect(() => {\n        getTaskLists();\n    },[])\n\n    const showModal = () => {\n        setShowModal(true);\n    }\n    \n    const hideModal = () => {\n        setTaskName('');\n        setIsEdit(false);\n        setEditId('');\n        setShowModal(false);\n    }\n\n    const getTaskLists = () => {\n        request.get('/tasks', {headers: { 'x-auth-token': getToken() }})\n        .then((response) => {\n            if(response) {\n                if(response.data.status === false) {\n                    console.log(response.data.message);\n                    return;\n                }\n                setTasks(response.data);\n            }\n        })\n        .catch(error => {\n            if(error) {\n                console.log(error);\n            }\n        })\n    }\n\n    const saveTask = (e) => {\n        const header = {\n            headers: { 'x-auth-token': getToken() }\n        }\n        if(isEdit) {\n            updateTask(editId, taskName, false);\n            hideModal()\n        } else {\n            request.post(`/tasks`, {\n                name: taskName,\n                completed: false\n            }, header)\n            .then((response) => {\n                if(response.data.status === false) {\n                    alert(response.data.message);\n                    return;\n                }\n                hideModal()\n                getTaskLists()\n                props.getDashboardData();\n            })\n            .catch(error => {\n                 if(error) {\n                     console.log(error);\n                 }\n            })\n        }\n        \n        e.preventDefault();\n    }\n\n    const updateTask = (id, name, completed) => {\n        //console.log(id, name);return;\n        const header = {\n            headers: { 'x-auth-token': getToken() }\n        }\n        request.put(`/tasks/${id}`, {\n            name: name,\n            completed: completed\n        }, header)\n        .then((response) => {\n            if(response.data.status === false) {\n                alert(response.data.message);\n                return;\n            }\n            getTaskLists()\n            props.getDashboardData();\n        })\n        .catch(error => {\n            if(error) {\n                console.log(error);\n            }\n        })\n    }\n\n    const deleteTask = (id) => {\n        const header = {\n            headers: { 'x-auth-token': getToken() }\n        }\n        request.delete(`/tasks/${id}`, header)\n        .then((response) => {\n            if(response.data.status === false) {\n                alert(response.data.message);\n                return;\n            }\n            getTaskLists()\n            props.getDashboardData();\n        })\n        .catch(error => {\n            if(error) {\n                console.log(error);\n            }\n        })\n    }\n\n    const editTask = (id, name, completed) => {\n        setTaskName(name);\n        setIsEdit(true);\n        setEditId(id);\n        showModal();\n    }\n\n    const handleSearch = (e) => {\n        const value = e.target.value\n        _.debounce(() => {\n            setSearchText(value)\n        }, 500)()\n    }\n\n    const getFilteredData = () => {\n        if (searchText.length <= 0) {\n          return tasks\n        }\n        return _.filter(tasks, (task) => {\n            return task.name.toLowerCase().includes(searchText.toLowerCase())\n        })\n    }\n    useEffect(() => {\n        setSearchData(getFilteredData())\n    }, [tasks, searchText])\n    \n    const renderHeader = () => {\n        return <div className=\"clear center-mob\">\n            <div className=\"left\"><h3 className=\"title\">{title}</h3></div>\n            <button type=\"button\" className=\"btn btn-primary right\" onClick={showModal}>\n                + New Task\n            </button>\n            <input \n                className=\"input-style search-input right\" \n                placeholder=\"Search by task name\" \n                onChange={(e) => handleSearch(e)}\n                allowClear\n            />\n        </div>\n    }\n\n    const renderTaskList = () => {\n        return <div>\n            <AppCard>\n                <TaskList>\n                    {\n                        searchData.map((task, index) => (\n                        (task.completed ? <ListItem className=\"clear\" key={index}>\n                                    <label className=\"left\">\n                                        <input type=\"checkbox\" checked readOnly/>\n                                        <del>{task.name}</del>\n                                    </label>\n                                    <div className=\"right\">\n                                        <button className=\"flat-btn\" type=\"button\">\n                                            <span className=\"material-icons  text-light-gray\">edit</span>    \n                                        </button>\n                                        <button className=\"flat-btn\" type=\"button\" onClick={() => deleteTask(task._id)}>\n                                            <span className=\"material-icons  text-light-gray\">delete</span>\n                                        </button>\n                                    </div>\n                            </ListItem> : <ListItem className=\"clear\" key={index}>\n                                <label className=\"left\">\n                                    <input type=\"checkbox\" value={task._id} onChange={(e) => {updateTask(e.target.value, task.name, true)}} />\n                                    <span>{task.name}</span>\n                                </label>\n                                <div className=\"right\">\n                                    <button className=\"flat-btn\" type=\"button\" onClick={() => editTask(task._id, task.name, false)}>\n                                        <span className=\"material-icons text-gray\">edit</span>    \n                                    </button>\n                                    <button className=\"flat-btn\" type=\"button\" onClick={() => deleteTask(task._id)}>\n                                        <span className=\"material-icons text-gray\">delete</span>\n                                    </button>\n                                </div>\n                            </ListItem>)\n                        ))\n                    }\n                </TaskList>\n            </AppCard>\n        </div>\n    }\n\n    const renderDashboardContent = () => {\n        return <>\n            {renderHeader()}\n            {renderTaskList()}\n        </>\n    }\n\n    return <>\n        {\n            props.totalTasks > 0 ? <>\n                {renderDashboardContent()}\n            </> : <>\n                <div className=\"card-centered\">\n                    <h3 className=\"title\" style={{flexDirection:'column'}}>You have no task</h3>\n                    <div className=\"form-group\" style={{flexDirection:'column'}}>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={showModal}>\n                            + New Task\n                        </button>\n                    </div>\n                </div>\n            </>\n        }\n        <Modal show={show} handleClose={hideModal}>\n            <h3 className=\"title\">\n                { isEdit ? 'Update Task' : ' New Task' }\n            </h3>\n            <form onSubmit={e => {saveTask(e)}}>\n                <div className=\"form-group\">\n                    <input \n                        onChange={(e) => setTaskName(e.target.value)} \n                        value={taskName} \n                        type=\"text\" \n                        className=\"input-style\" \n                        placeholder=\"Task Name\" \n                    />\n                </div>\n                <div className=\"form-group\">\n                    <button className=\"btn btn-primary btn-expand no-pad\"> { isEdit ? 'Update Task' : '+ New Task' }</button>\n                </div>\n            </form>\n        </Modal>\n    </>\n}\n\nexport default TaskDetails;","/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/modal/Modal.js",[],"/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/index.js",[],"/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/App.js",[],"/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/reportWebVitals.js",[],"/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/routes.js",[],"/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/utils/user-utils.js",[],"/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/screens/dashboard/Dashboard.js",[],"/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/screens/login/Login.js",[],"/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/screens/pageNotFound/PageNotFound.js",[],"/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/utils/api-utils.js",[],"/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/screens/login/styles.js",[],"/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/components/header/Header.js",[],"/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/components/card/TaskCard.js",["122"],"/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/components/taskDetails/TaskDetails.js",["123"],"/Users/silicontechlab/Documents/Gajanan/tdcx/client/src/components/modal/Modal.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":4,"column":24,"nodeType":"130","messageId":"131","endLine":4,"endColumn":31},{"ruleId":"132","severity":1,"message":"133","line":170,"column":8,"nodeType":"134","endLine":170,"endColumn":27,"suggestions":"135"},{"ruleId":"128","severity":1,"message":"129","line":4,"column":24,"nodeType":"130","messageId":"131","endLine":4,"endColumn":31},{"ruleId":"132","severity":1,"message":"133","line":170,"column":8,"nodeType":"134","endLine":170,"endColumn":27,"suggestions":"136"},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'Tooltip' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getFilteredData'. Either include it or remove the dependency array.","ArrayExpression",["139"],["140"],"no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},{"desc":"141","fix":"143"},"Update the dependencies array to be: [tasks, searchText, getFilteredData]",{"range":"144","text":"145"},{"range":"146","text":"145"},[4492,4511],"[tasks, searchText, getFilteredData]",[4492,4511]]