{"ast":null,"code":"var _jsxFileName = \"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/card/TaskCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './styles.css';\nimport styled from 'styled-components';\nimport { PieChart, Pie, Legend, Tooltip, ResponsiveContainer, Cell } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppCard = styled.div`\n    background: #fff;\n    padding: 20px 20px;\n    transition: 0.5s all ease-out;\n    filter: drop-shadow(0 0 1px #ccc);\n    border-radius: 10px;\n    height: 120px;\n`;\n_c = AppCard;\nconst CompletedTask = styled.label`\n    color: #1976d2;\n    font-size: 50px;\n`;\n_c2 = CompletedTask;\n\nconst TaskCard = props => {\n  _s();\n\n  const {\n    title,\n    type,\n    dashboardData\n  } = props;\n  const [data, setData] = useState([]);\n  console.log(dashboardData.latestTasks);\n  useEffect(() => {\n    const totalTasks = dashboardData.totalTasks;\n    let completed = dashboardData.tasksCompleted;\n    let pending = completed / totalTasks * 100;\n    setData([{\n      name: '',\n      value: completed\n    }, {\n      name: \"\",\n      value: pending\n    }]);\n  }, []);\n\n  const renderCounter = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CompletedTask, {\n        children: dashboardData.tasksCompleted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), \"/\", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: dashboardData.totalTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this);\n  };\n\n  const renderList = () => {\n    if (dashboardData.latestTasks) {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"card-list\",\n        children: dashboardData.latestTasks.map((data, index) => !data.completed ? /*#__PURE__*/_jsxDEV(\"li\", {\n          children: data.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 44\n        }, this) : /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"del\", {\n            children: data.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 95\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 79\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 20\n      }, this);\n    }\n\n    return \"\";\n  };\n\n  const renderChart = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        minHeight: 100,\n        children: /*#__PURE__*/_jsxDEV(PieChart, {\n          children: [/*#__PURE__*/_jsxDEV(Pie, {\n            dataKey: \"value\",\n            isAnimationActive: false,\n            data: data,\n            fill: \"#8884d8\",\n            label: renderLabel,\n            labelLine: false,\n            children: data.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n              dataKey: \"name\",\n              fill: COLORS[index % COLORS.length]\n            }, `cell-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this);\n  };\n\n  const renderCardContent = () => {\n    if (type === 'TASK_COUNTER') {\n      return renderCounter();\n    } else if (type === 'TASK_LIST') {\n      return renderList();\n    } else if (type === 'TASK_CHART') {\n      return renderChart();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppCard, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"card-title\",\n      children: [\" \", title !== null && title !== void 0 ? title : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), renderCardContent()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 12\n  }, this);\n};\n\n_s(TaskCard, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c3 = TaskCard;\nconst COLORS = ['#1890ff', '#ddd'];\nconst RADIAN = Math.PI / 180;\n\nconst renderLabel = ({\n  cx,\n  cy,\n  midAngle,\n  innerRadius,\n  outerRadius,\n  percent,\n  index,\n  name\n}) => {\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n  return /*#__PURE__*/_jsxDEV(\"text\", {\n    \"font-size\": \"11\",\n    x: x,\n    y: y,\n    fill: \"#444\",\n    textAnchor: x > cx ? 'start' : 'end',\n    dominantBaseline: \"central\",\n    children: `${name}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\nexport default TaskCard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AppCard\");\n$RefreshReg$(_c2, \"CompletedTask\");\n$RefreshReg$(_c3, \"TaskCard\");","map":{"version":3,"sources":["/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/card/TaskCard.js"],"names":["React","useEffect","useState","styled","PieChart","Pie","Legend","Tooltip","ResponsiveContainer","Cell","AppCard","div","CompletedTask","label","TaskCard","props","title","type","dashboardData","data","setData","console","log","latestTasks","totalTasks","completed","tasksCompleted","pending","name","value","renderCounter","marginTop","renderList","map","index","renderChart","renderLabel","entry","COLORS","length","renderCardContent","RADIAN","Math","PI","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","x","cos","y","sin"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './styles.css';\nimport styled from 'styled-components';\nimport {PieChart, Pie, Legend, Tooltip, ResponsiveContainer, Cell} from 'recharts';\n\nconst AppCard = styled.div`\n    background: #fff;\n    padding: 20px 20px;\n    transition: 0.5s all ease-out;\n    filter: drop-shadow(0 0 1px #ccc);\n    border-radius: 10px;\n    height: 120px;\n`;\nconst CompletedTask = styled.label`\n    color: #1976d2;\n    font-size: 50px;\n`;\n\nconst TaskCard = (props) => {\n    const {title, type, dashboardData} = props;\n    const [data, setData] = useState([]);\n    console.log(dashboardData.latestTasks)\n    useEffect(()=> {\n        const totalTasks = dashboardData.totalTasks;\n        let completed = dashboardData.tasksCompleted;\n        let pending = completed/totalTasks*100;\n        setData([\n            {name: '', value: completed},\n            {name: \"\", value: pending}\n        ])\n    },[])\n\n    const renderCounter = () => {\n        return <div style={{marginTop: '20px'}}>\n            <CompletedTask>{dashboardData.tasksCompleted}</CompletedTask>/\n            <label>{dashboardData.totalTasks}</label>\n        </div>\n    }\n\n    const renderList = () => {\n        if(dashboardData.latestTasks) {\n            return <ul className=\"card-list\">\n                { \n                    dashboardData.latestTasks.map((data, index) => (\n                        (!data.completed ? <li key={index}>{data.name}</li> : <li key={index}><del>{data.name}</del></li>)\n                        \n                    ))\n                }\n            </ul>\n        }\n        return \"\"\n    }\n\n    const renderChart = () => {\n        return <div className=\"chart-container\">\n             <ResponsiveContainer width=\"100%\" height=\"100%\" minHeight={100}>\n            <PieChart>\n            <Pie\n                dataKey=\"value\"\n                isAnimationActive={false}\n                data={data}\n                fill=\"#8884d8\"\n                label={renderLabel}\n                labelLine={false}\n            >\n                {data.map((entry, index) => (\n                    <Cell\n                        dataKey=\"name\"\n                        key={`cell-${index}`}\n                        fill={COLORS[index % COLORS.length]}\n                    />\n                ))}\n            </Pie>\n            <Tooltip />\n            </PieChart>\n      </ResponsiveContainer>\n        </div>\n    }\n\n    const renderCardContent = () => {\n        if(type === 'TASK_COUNTER') {\n            return renderCounter()\n        }\n\n        else if(type === 'TASK_LIST') {\n           return renderList()\n        }\n\n        else if(type === 'TASK_CHART') {\n            return renderChart()\n        }\n    }\n\n    \n    return <AppCard>\n        <h3 className=\"card-title\"> {title??\"\"}</h3>\n        {renderCardContent()}\n    </AppCard>\n}\n\nconst COLORS = ['#1890ff', '#ddd'];\n\nconst RADIAN = Math.PI / 180;\nconst renderLabel = ({\n  cx, cy, midAngle, innerRadius, outerRadius, percent, index, name\n}) => {\n   const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <text font-size=\"11\" x={x} y={y} fill=\"#444\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n      {`${name}`}\n    </text>\n  );\n}\n\nexport default TaskCard;"]},"metadata":{},"sourceType":"module"}