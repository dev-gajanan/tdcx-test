{"ast":null,"code":"var _jsxFileName = \"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/card/TaskCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './styles.css';\nimport styled from 'styled-components';\nimport { PieChart, Pie, Legend, Tooltip, ResponsiveContainer, Cell } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppCard = styled.div`\n    background: #fff;\n    padding: 20px 20px;\n    transition: 0.5s all ease-out;\n    filter: drop-shadow(0 0 1px #ccc);\n    border-radius: 10px;\n    height: 120px;\n`;\n_c = AppCard;\nconst CompletedTask = styled.label`\n    color: #1976d2;\n    font-size: 50px;\n`;\n_c2 = CompletedTask;\n\nconst TaskCard = props => {\n  _s();\n\n  const {\n    title,\n    type\n  } = props;\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    setData([{\n      name: 'Completed',\n      value: \"Completed\"\n    }, {\n      name: \"Pending\",\n      value: \"Pending\"\n    }]);\n  }, []);\n\n  const renderCounter = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CompletedTask, {\n        children: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), \"/\", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"20\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 16\n    }, this);\n  };\n\n  const renderList = () => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"card-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Clean the room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Production deployment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"del\", {\n          children: \"Dinner sex\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this);\n  };\n\n  const renderChart = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"80%\",\n        minHeight: 100,\n        children: /*#__PURE__*/_jsxDEV(PieChart, {\n          width: 400,\n          height: 400,\n          children: [/*#__PURE__*/_jsxDEV(Pie, {\n            dataKey: \"value\",\n            isAnimationActive: false,\n            data: data,\n            cx: \"50%\",\n            cy: \"50%\",\n            outerRadius: 80,\n            fill: \"#8884d8\",\n            label: renderLabel,\n            labelLine: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Pie, {\n            dataKey: \"value\",\n            data: data02,\n            cx: 500,\n            cy: 200,\n            innerRadius: 40,\n            outerRadius: 80,\n            fill: \"#82ca9d\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  };\n\n  const renderCardContent = () => {\n    if (type === 'TASK_COUNTER') {\n      return renderCounter();\n    } else if (type === 'TASK_LIST') {\n      return renderList();\n    } else if (type === 'TASK_CHART') {\n      return renderChart();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppCard, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"card-title\",\n      children: [\" \", title !== null && title !== void 0 ? title : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), renderCardContent()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 12\n  }, this);\n};\n\n_s(TaskCard, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c3 = TaskCard;\nconst COLORS = ['#1890ff', '#ddd'];\nconst RADIAN = Math.PI / 180;\n\nconst renderLabel = ({\n  cx,\n  cy,\n  midAngle,\n  innerRadius,\n  outerRadius,\n  percent,\n  index,\n  name\n}) => {\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n  return /*#__PURE__*/_jsxDEV(\"text\", {\n    \"font-size\": \"11\",\n    x: x,\n    y: y,\n    fill: \"#444\",\n    textAnchor: x > cx ? 'start' : 'end',\n    dominantBaseline: \"central\",\n    children: `${name}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\nexport default TaskCard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AppCard\");\n$RefreshReg$(_c2, \"CompletedTask\");\n$RefreshReg$(_c3, \"TaskCard\");","map":{"version":3,"sources":["/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/card/TaskCard.js"],"names":["React","useEffect","useState","styled","PieChart","Pie","Legend","Tooltip","ResponsiveContainer","Cell","AppCard","div","CompletedTask","label","TaskCard","props","title","type","data","setData","name","value","renderCounter","marginTop","renderList","renderChart","renderLabel","data02","renderCardContent","COLORS","RADIAN","Math","PI","cx","cy","midAngle","innerRadius","outerRadius","percent","index","radius","x","cos","y","sin"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './styles.css';\nimport styled from 'styled-components';\nimport {PieChart, Pie, Legend, Tooltip, ResponsiveContainer, Cell} from 'recharts';\n\nconst AppCard = styled.div`\n    background: #fff;\n    padding: 20px 20px;\n    transition: 0.5s all ease-out;\n    filter: drop-shadow(0 0 1px #ccc);\n    border-radius: 10px;\n    height: 120px;\n`;\nconst CompletedTask = styled.label`\n    color: #1976d2;\n    font-size: 50px;\n`;\n\nconst TaskCard = (props) => {\n    const {title, type} = props;\n    const [data, setData] = useState([]);\n    useEffect(()=> {\n        setData([\n            {name: 'Completed', value: \"Completed\"},\n            {name: \"Pending\", value: \"Pending\"}\n        ])\n    },[])\n    const renderCounter = () => {\n        return <div style={{marginTop: '20px'}}>\n            <CompletedTask>5</CompletedTask>/\n            <label>20</label>\n        </div>\n    }\n\n    const renderList = () => {\n        return <ul className=\"card-list\">\n            <li>Clean the room</li>\n            <li>Production deployment</li>\n            <li><del>Dinner sex</del></li>\n        </ul>\n    }\n\n    const renderChart = () => {\n        return <div className=\"chart-container\">\n             <ResponsiveContainer width=\"100%\" height=\"80%\" minHeight={100}>\n            <PieChart width={400} height={400}>\n            <Pie\n                dataKey=\"value\"\n                isAnimationActive={false}\n                data={data}\n                cx=\"50%\"\n                cy=\"50%\"\n                outerRadius={80}\n                fill=\"#8884d8\"\n                label={renderLabel}\n                labelLine={false}\n            />\n            <Pie dataKey=\"value\" data={data02} cx={500} cy={200} innerRadius={40} outerRadius={80} fill=\"#82ca9d\" />\n            <Tooltip />\n            </PieChart>\n      </ResponsiveContainer>\n        </div>\n       \n    }\n\n    const renderCardContent = () => {\n        if(type === 'TASK_COUNTER') {\n            return renderCounter()\n        }\n\n        else if(type === 'TASK_LIST') {\n           return renderList()\n        }\n\n        else if(type === 'TASK_CHART') {\n            return renderChart()\n        }\n    }\n\n    \n    return <AppCard>\n        <h3 className=\"card-title\"> {title??\"\"}</h3>\n        {renderCardContent()}\n    </AppCard>\n}\n\nconst COLORS = ['#1890ff', '#ddd'];\n\nconst RADIAN = Math.PI / 180;\nconst renderLabel = ({\n  cx, cy, midAngle, innerRadius, outerRadius, percent, index, name\n}) => {\n   const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <text font-size=\"11\" x={x} y={y} fill=\"#444\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n      {`${name}`}\n    </text>\n  );\n}\n\nexport default TaskCard;"]},"metadata":{},"sourceType":"module"}