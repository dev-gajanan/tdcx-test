{"ast":null,"code":"var _jsxFileName = \"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/card/TaskCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './styles.css';\nimport styled from 'styled-components';\nimport { PieChart, Pie, Legend, Tooltip, ResponsiveContainer, Cell } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppCard = styled.div`\n    background: #fff;\n    padding: 20px 20px;\n    transition: 0.5s all ease-out;\n    filter: drop-shadow(0 0 1px #ccc);\n    border-radius: 10px;\n    height: 120px;\n`;\n_c = AppCard;\nconst CompletedTask = styled.label`\n    color: #1976d2;\n    font-size: 50px;\n`;\n_c2 = CompletedTask;\n\nconst TaskCard = props => {\n  _s();\n\n  const {\n    title,\n    type,\n    dashboardData\n  } = props;\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    let completed = 0;\n    let pending = 0;\n    dashboardData.latestTasks.forEach(data => {\n      if (data.completed) {\n        completed++;\n      } else {\n        pending++;\n      }\n    });\n    setData([{\n      name: '',\n      value: completed\n    }, {\n      name: \"\",\n      value: pending\n    }]);\n  }, []);\n\n  const renderCounter = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CompletedTask, {\n        children: dashboardData.tasksCompleted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), \"/\", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: dashboardData.totalTasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this);\n  };\n\n  const renderList = () => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"card-list\",\n      children: dashboardData.latestTasks.map((data, index) => !data.completed ? /*#__PURE__*/_jsxDEV(\"li\", {\n        children: data.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 40\n      }, this) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"del\", {\n          children: data.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 67\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 63\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  };\n\n  const renderChart = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        minHeight: 100,\n        children: /*#__PURE__*/_jsxDEV(PieChart, {\n          children: [/*#__PURE__*/_jsxDEV(Pie, {\n            dataKey: \"value\",\n            isAnimationActive: false,\n            data: data,\n            fill: \"#8884d8\",\n            label: true,\n            labelLine: true,\n            children: data.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n              dataKey: \"name\",\n              fill: COLORS[index % COLORS.length]\n            }, `cell-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  };\n\n  const renderCardContent = () => {\n    if (type === 'TASK_COUNTER') {\n      return renderCounter();\n    } else if (type === 'TASK_LIST') {\n      return renderList();\n    } else if (type === 'TASK_CHART') {\n      return renderChart();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppCard, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"card-title\",\n      children: [\" \", title !== null && title !== void 0 ? title : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), renderCardContent()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 12\n  }, this);\n};\n\n_s(TaskCard, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c3 = TaskCard;\nconst COLORS = ['#1890ff', '#ddd'];\nconst RADIAN = Math.PI / 180;\n\nconst renderLabel = ({\n  cx,\n  cy,\n  midAngle,\n  innerRadius,\n  outerRadius,\n  percent,\n  index,\n  name\n}) => {\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n  return /*#__PURE__*/_jsxDEV(\"text\", {\n    \"font-size\": \"11\",\n    x: x,\n    y: y,\n    fill: \"#444\",\n    textAnchor: x > cx ? 'start' : 'end',\n    dominantBaseline: \"central\",\n    children: `${name}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\nexport default TaskCard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AppCard\");\n$RefreshReg$(_c2, \"CompletedTask\");\n$RefreshReg$(_c3, \"TaskCard\");","map":{"version":3,"sources":["/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/card/TaskCard.js"],"names":["React","useEffect","useState","styled","PieChart","Pie","Legend","Tooltip","ResponsiveContainer","Cell","AppCard","div","CompletedTask","label","TaskCard","props","title","type","dashboardData","data","setData","completed","pending","latestTasks","forEach","name","value","renderCounter","marginTop","tasksCompleted","totalTasks","renderList","map","index","renderChart","entry","COLORS","length","renderCardContent","RADIAN","Math","PI","renderLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","x","cos","y","sin"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './styles.css';\nimport styled from 'styled-components';\nimport {PieChart, Pie, Legend, Tooltip, ResponsiveContainer, Cell} from 'recharts';\n\nconst AppCard = styled.div`\n    background: #fff;\n    padding: 20px 20px;\n    transition: 0.5s all ease-out;\n    filter: drop-shadow(0 0 1px #ccc);\n    border-radius: 10px;\n    height: 120px;\n`;\nconst CompletedTask = styled.label`\n    color: #1976d2;\n    font-size: 50px;\n`;\n\nconst TaskCard = (props) => {\n    const {title, type, dashboardData} = props;\n    const [data, setData] = useState([]);\n    useEffect(()=> {\n        let completed = 0;\n        let pending = 0;\n        dashboardData.latestTasks.forEach((data) => {\n            if(data.completed) {\n                completed++;\n            } else{\n                pending++;\n            }\n        })\n        setData([\n            {name: '', value: completed},\n            {name: \"\", value: pending}\n        ])\n    },[])\n\n    const renderCounter = () => {\n        return <div style={{marginTop: '20px'}}>\n            <CompletedTask>{dashboardData.tasksCompleted}</CompletedTask>/\n            <label>{dashboardData.totalTasks}</label>\n        </div>\n    }\n\n    const renderList = () => {\n        return <ul className=\"card-list\">\n            {\n                dashboardData.latestTasks.map((data, index) => (\n                    (!data.completed ? <li>{data.name}</li> : <li><del>{data.name}</del></li>)\n                    \n                ))\n            }\n        </ul>\n    }\n\n    const renderChart = () => {\n        return <div className=\"chart-container\">\n             <ResponsiveContainer width=\"100%\" height=\"100%\" minHeight={100}>\n            <PieChart>\n            <Pie\n                dataKey=\"value\"\n                isAnimationActive={false}\n                data={data}\n                fill=\"#8884d8\"\n                label\n                labelLine={true}\n            >\n                {data.map((entry, index) => (\n                    <Cell\n                        dataKey=\"name\"\n                        key={`cell-${index}`}\n                        fill={COLORS[index % COLORS.length]}\n                    />\n                ))}\n            </Pie>\n            <Tooltip />\n            </PieChart>\n      </ResponsiveContainer>\n        </div>\n    }\n\n    const renderCardContent = () => {\n        if(type === 'TASK_COUNTER') {\n            return renderCounter()\n        }\n\n        else if(type === 'TASK_LIST') {\n           return renderList()\n        }\n\n        else if(type === 'TASK_CHART') {\n            return renderChart()\n        }\n    }\n\n    \n    return <AppCard>\n        <h3 className=\"card-title\"> {title??\"\"}</h3>\n        {renderCardContent()}\n    </AppCard>\n}\n\nconst COLORS = ['#1890ff', '#ddd'];\n\nconst RADIAN = Math.PI / 180;\nconst renderLabel = ({\n  cx, cy, midAngle, innerRadius, outerRadius, percent, index, name\n}) => {\n   const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <text font-size=\"11\" x={x} y={y} fill=\"#444\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n      {`${name}`}\n    </text>\n  );\n}\n\nexport default TaskCard;"]},"metadata":{},"sourceType":"module"}