{"ast":null,"code":"var _jsxFileName = \"/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/taskDetails/TaskDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './styles.css';\nimport styled from 'styled-components';\nimport { request } from '../../utils/api-utils';\nimport { getToken } from '../../utils/user-utils';\nimport Modal from '../modal/Modal';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AppCard = styled.div`\n    background: #fff;\n    padding: 20px 20px;\n    transition: 0.5s all ease-out;\n    filter: drop-shadow(0 0 1px #ccc);\n    border-radius: 10px;\n    height: auto;\n`;\n_c = AppCard;\nconst TaskList = styled.ul`\n    margin: 0;\n    padding: 0;\n    list-style: none;\n`;\n_c2 = TaskList;\nconst ListItem = styled.li`\n    padding: 15px 0;\n    border-top: 1px solid #eee;\n    :first-of-type {\n        border-top: none;\n    }\n`;\n_c3 = ListItem;\n\nconst TaskDetails = props => {\n  _s();\n\n  const {\n    title\n  } = props;\n  const [tasks, setTasks] = useState([]);\n  const [show, setShowModal] = useState(false);\n  const [taskName, setTaskName] = useState('');\n  const [isEdit, setIsEdit] = useState(false);\n  const [editId, setEditId] = useState('');\n  const [searchText, setSearchText] = useState('');\n  const [searchData, setSearchData] = useState([]);\n  useEffect(() => {\n    getTaskLists();\n  }, []);\n\n  const showModal = () => {\n    setShowModal(true);\n  };\n\n  const hideModal = () => {\n    setShowModal(false);\n  };\n\n  const getTaskLists = () => {\n    request.get('/tasks', {\n      headers: {\n        'x-auth-token': getToken()\n      }\n    }).then(response => {\n      if (response) {\n        if (response.data.status === false) {\n          console.log(response.data.message);\n          return;\n        }\n\n        setTasks(response.data);\n      }\n    }).catch(error => {\n      if (error) {\n        console.log(error);\n      }\n    });\n  };\n\n  const saveTask = e => {\n    const header = {\n      headers: {\n        'x-auth-token': getToken()\n      }\n    };\n\n    if (isEdit) {\n      updateTask(editId, taskName, false);\n      hideModal();\n    } else {\n      request.post(`/tasks`, {\n        name: taskName,\n        completed: false\n      }, header).then(response => {\n        if (response.data.status === false) {\n          alert(response.data.message);\n          return;\n        }\n\n        hideModal();\n        getTaskLists();\n        props.getDashboardData();\n      }).catch(error => {\n        if (error) {\n          console.log(error);\n        }\n      });\n    }\n\n    e.preventDefault();\n  };\n\n  const updateTask = (id, name, completed) => {\n    //console.log(id, name);return;\n    const header = {\n      headers: {\n        'x-auth-token': getToken()\n      }\n    };\n    request.put(`/tasks/${id}`, {\n      name: name,\n      completed: completed\n    }, header).then(response => {\n      if (response.data.status === false) {\n        alert(response.data.message);\n        return;\n      }\n\n      getTaskLists();\n      props.getDashboardData();\n    }).catch(error => {\n      if (error) {\n        console.log(error);\n      }\n    });\n  };\n\n  const deleteTask = id => {\n    const header = {\n      headers: {\n        'x-auth-token': getToken()\n      }\n    };\n    request.delete(`/tasks/${id}`, header).then(response => {\n      if (response.data.status === false) {\n        alert(response.data.message);\n        return;\n      }\n\n      getTaskLists();\n      props.getDashboardData();\n    }).catch(error => {\n      if (error) {\n        console.log(error);\n      }\n    });\n  };\n\n  const editTask = (id, name, completed) => {\n    setTaskName(name);\n    setIsEdit(true);\n    setEditId(id);\n    showModal();\n  };\n\n  const handleSearch = e => {\n    const value = e.target.value;\n\n    _.debounce(() => {\n      setSearchText(value);\n    }, 500)();\n  };\n\n  const getFilteredData = () => {\n    if (searchText.length <= 0) {\n      return tasks;\n    }\n\n    return _.filter(tasks, task => {\n      return task.name.toLowerCase().includes(searchText.toLowerCase());\n    });\n  };\n\n  useEffect(() => {\n    setSearchData(getFilteredData());\n  }, [tasks, searchText]);\n\n  const renderHeader = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clear\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"title\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary right\",\n        onClick: showModal,\n        children: \"+ New Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-style search-input right\",\n        placeholder: \"Search by task name\",\n        onChange: e => handleSearch(e),\n        allowClear: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 16\n    }, this);\n  };\n\n  const renderTaskList = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(AppCard, {\n        children: /*#__PURE__*/_jsxDEV(TaskList, {\n          children: searchData.map((task, index) => task.completed ? /*#__PURE__*/_jsxDEV(ListItem, {\n            className: \"clear\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"left\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: true,\n                readOnly: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"del\", {\n                children: task.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"right\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"flat-btn\",\n                type: \"button\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"material-icons  text-light-gray\",\n                  children: \"edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"flat-btn\",\n                type: \"button\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"material-icons  text-light-gray\",\n                  children: \"delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 43\n          }, this) : /*#__PURE__*/_jsxDEV(ListItem, {\n            className: \"clear\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"left\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                value: task._id,\n                onChange: e => {\n                  updateTask(e.target.value, task.name, true);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: task.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"right\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"flat-btn\",\n                type: \"button\",\n                onClick: () => editTask(task._id, task.name, false),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"material-icons text-gray\",\n                  children: \"edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"flat-btn\",\n                type: \"button\",\n                onClick: () => deleteTask(task._id),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"material-icons text-gray\",\n                  children: \"delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 43\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 16\n    }, this);\n  };\n\n  const renderDashboardContent = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [renderHeader(), renderTaskList()]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [props.totalTasks < 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: renderDashboardContent()\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-centered\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"title\",\n          style: {\n            flexDirection: 'columns'\n          },\n          children: \"You have no task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary\",\n            onClick: showModal,\n            children: \"+ New Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this)\n    }, void 0, false), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      handleClose: hideModal,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"title\",\n        children: isEdit ? 'Update Task' : ' New Task'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          saveTask(e);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: e => setTaskName(e.target.value),\n            value: taskName,\n            type: \"text\",\n            className: \"input-style\",\n            placeholder: \"Task Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-expand no-pad\",\n            children: [\" \", isEdit ? 'Update Task' : '+ New Task']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TaskDetails, \"PDOnp5QW8sasicPaIrZL8mGCwJw=\");\n\n_c4 = TaskDetails;\nexport default TaskDetails;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"AppCard\");\n$RefreshReg$(_c2, \"TaskList\");\n$RefreshReg$(_c3, \"ListItem\");\n$RefreshReg$(_c4, \"TaskDetails\");","map":{"version":3,"sources":["/Users/silicontechlab/Documents/Gajanan/react/tasktodo/src/components/taskDetails/TaskDetails.js"],"names":["React","useEffect","useState","styled","request","getToken","Modal","_","AppCard","div","TaskList","ul","ListItem","li","TaskDetails","props","title","tasks","setTasks","show","setShowModal","taskName","setTaskName","isEdit","setIsEdit","editId","setEditId","searchText","setSearchText","searchData","setSearchData","getTaskLists","showModal","hideModal","get","headers","then","response","data","status","console","log","message","catch","error","saveTask","e","header","updateTask","post","name","completed","alert","getDashboardData","preventDefault","id","put","deleteTask","delete","editTask","handleSearch","value","target","debounce","getFilteredData","length","filter","task","toLowerCase","includes","renderHeader","renderTaskList","map","index","_id","renderDashboardContent","totalTasks","flexDirection"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './styles.css';\nimport styled from 'styled-components';\nimport { request } from '../../utils/api-utils';\nimport { getToken } from '../../utils/user-utils';\nimport Modal from '../modal/Modal';\nimport _ from 'lodash';\nconst AppCard = styled.div`\n    background: #fff;\n    padding: 20px 20px;\n    transition: 0.5s all ease-out;\n    filter: drop-shadow(0 0 1px #ccc);\n    border-radius: 10px;\n    height: auto;\n`;\nconst TaskList = styled.ul`\n    margin: 0;\n    padding: 0;\n    list-style: none;\n`;\nconst ListItem = styled.li`\n    padding: 15px 0;\n    border-top: 1px solid #eee;\n    :first-of-type {\n        border-top: none;\n    }\n`;\nconst TaskDetails = (props) => {\n    const {title} = props\n    const [tasks, setTasks] = useState([])\n    const [show, setShowModal] = useState(false)\n    const [taskName, setTaskName] = useState('')\n    const [isEdit, setIsEdit] = useState(false)\n    const [editId, setEditId] = useState('')\n    const [searchText, setSearchText] = useState('')\n    const [searchData, setSearchData] = useState([])\n\n    useEffect(() => {\n        getTaskLists();\n    },[])\n\n    const showModal = () => {\n        setShowModal(true);\n    }\n    \n    const hideModal = () => {\n        setShowModal(false);\n    }\n\n    const getTaskLists = () => {\n        request.get('/tasks', {headers: { 'x-auth-token': getToken() }})\n        .then((response) => {\n            if(response) {\n                if(response.data.status === false) {\n                    console.log(response.data.message);\n                    return;\n                }\n                setTasks(response.data);\n            }\n        })\n        .catch(error => {\n            if(error) {\n                console.log(error);\n            }\n        })\n    }\n\n    const saveTask = (e) => {\n        const header = {\n            headers: { 'x-auth-token': getToken() }\n        }\n        if(isEdit) {\n            updateTask(editId, taskName, false);\n            hideModal()\n        } else {\n            request.post(`/tasks`, {\n                name: taskName,\n                completed: false\n            }, header)\n            .then((response) => {\n                if(response.data.status === false) {\n                    alert(response.data.message);\n                    return;\n                }\n                hideModal()\n                getTaskLists()\n                props.getDashboardData();\n            })\n            .catch(error => {\n                 if(error) {\n                     console.log(error);\n                 }\n            })\n        }\n        \n        e.preventDefault();\n    }\n\n    const updateTask = (id, name, completed) => {\n        //console.log(id, name);return;\n        const header = {\n            headers: { 'x-auth-token': getToken() }\n        }\n        request.put(`/tasks/${id}`, {\n            name: name,\n            completed: completed\n        }, header)\n        .then((response) => {\n            if(response.data.status === false) {\n                alert(response.data.message);\n                return;\n            }\n            getTaskLists()\n            props.getDashboardData();\n        })\n        .catch(error => {\n            if(error) {\n                console.log(error);\n            }\n        })\n    }\n\n    const deleteTask = (id) => {\n        const header = {\n            headers: { 'x-auth-token': getToken() }\n        }\n        request.delete(`/tasks/${id}`, header)\n        .then((response) => {\n            if(response.data.status === false) {\n                alert(response.data.message);\n                return;\n            }\n            getTaskLists()\n            props.getDashboardData();\n        })\n        .catch(error => {\n            if(error) {\n                console.log(error);\n            }\n        })\n    }\n\n    const editTask = (id, name, completed) => {\n        setTaskName(name);\n        setIsEdit(true);\n        setEditId(id);\n        showModal();\n    }\n\n    const handleSearch = (e) => {\n        const value = e.target.value\n        _.debounce(() => {\n            setSearchText(value)\n        }, 500)()\n    }\n\n    const getFilteredData = () => {\n        if (searchText.length <= 0) {\n          return tasks\n        }\n        return _.filter(tasks, (task) => {\n            return task.name.toLowerCase().includes(searchText.toLowerCase())\n        })\n    }\n    useEffect(() => {\n        setSearchData(getFilteredData())\n    }, [tasks, searchText])\n    \n    const renderHeader = () => {\n        return <div className=\"clear\">\n            <div className=\"left\"><h3 className=\"title\">{title}</h3></div>\n            <button type=\"button\" className=\"btn btn-primary right\" onClick={showModal}>\n                + New Task\n            </button>\n            <input \n                className=\"input-style search-input right\" \n                placeholder=\"Search by task name\" \n                onChange={(e) => handleSearch(e)}\n                allowClear\n            />\n        </div>\n    }\n\n    const renderTaskList = () => {\n        return <div>\n            <AppCard>\n                <TaskList>\n                    {\n                        searchData.map((task, index) => (\n                        (task.completed ? <ListItem className=\"clear\" key={index}>\n                                    <label className=\"left\">\n                                        <input type=\"checkbox\" checked readOnly/>\n                                        <del>{task.name}</del>\n                                    </label>\n                                    <div className=\"right\">\n                                        <button className=\"flat-btn\" type=\"button\">\n                                            <span className=\"material-icons  text-light-gray\">edit</span>    \n                                        </button>\n                                        <button className=\"flat-btn\" type=\"button\">\n                                            <span className=\"material-icons  text-light-gray\">delete</span>\n                                        </button>\n                                    </div>\n                            </ListItem> : <ListItem className=\"clear\" key={index}>\n                                <label className=\"left\">\n                                    <input type=\"checkbox\" value={task._id} onChange={(e) => {updateTask(e.target.value, task.name, true)}} />\n                                    <span>{task.name}</span>\n                                </label>\n                                <div className=\"right\">\n                                    <button className=\"flat-btn\" type=\"button\" onClick={() => editTask(task._id, task.name, false)}>\n                                        <span className=\"material-icons text-gray\">edit</span>    \n                                    </button>\n                                    <button className=\"flat-btn\" type=\"button\" onClick={() => deleteTask(task._id)}>\n                                        <span className=\"material-icons text-gray\">delete</span>\n                                    </button>\n                                </div>\n                            </ListItem>)\n                        ))\n                    }\n                </TaskList>\n            </AppCard>\n        </div>\n    }\n\n    const renderDashboardContent = () => {\n        return <>\n            {renderHeader()}\n            {renderTaskList()}\n        </>\n    }\n\n    return <>\n        {\n            props.totalTasks < 0 ? <>\n                {renderDashboardContent()}\n            </> : <>\n                <div className=\"card-centered\">\n                    <h3 className=\"title\" style={{flexDirection:'columns'}}>You have no task</h3>\n                    <div className=\"form-group\">\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={showModal}>\n                            + New Task\n                        </button>\n                    </div>\n                </div>\n            </>\n        }\n        <Modal show={show} handleClose={hideModal}>\n            <h3 className=\"title\">\n                { isEdit ? 'Update Task' : ' New Task' }\n            </h3>\n            <form onSubmit={e => {saveTask(e)}}>\n                <div className=\"form-group\">\n                    <input \n                        onChange={(e) => setTaskName(e.target.value)} \n                        value={taskName} \n                        type=\"text\" \n                        className=\"input-style\" \n                        placeholder=\"Task Name\" \n                    />\n                </div>\n                <div className=\"form-group\">\n                    <button className=\"btn btn-primary btn-expand no-pad\"> { isEdit ? 'Update Task' : '+ New Task' }</button>\n                </div>\n            </form>\n        </Modal>\n    </>\n}\n\nexport default TaskDetails;"]},"metadata":{},"sourceType":"module"}